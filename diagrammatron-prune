#!/usr/bin/env ruby

# Copyright 2021 Ismo KÃ¤rkkÃ¤inen
# Licensed under Universal Permissive License. See License.txt.

require 'optparse'
require 'yaml'
require 'set'
require 'pathname'

def load_source
  begin
    if $INPUT.nil?
      src = YAML.load($stdin)
    else
      src = YAML.load(File.read($INPUT))
    end
  rescue Errno::ENOENT => e
    $stderr.puts "Could not load #{$INPUT.nil? ? 'stdin' : $INPUT}"
    return nil
  rescue StandardError => e
    $stderr.puts e.to_s
    $stderr.puts "Failed to read #{$INPUT.nil? ? 'stdin' : $INPUT}"
    return nil
  end
  return src
end

def prune_array(original, matching, keep)
  kept = []
  original.each_index do |k|
    if (keep and matching[k]) or (not(keep) and not(matching[k]))
      kept.push original[k]
    end
  end
  return kept
end

def prune(doc, patterns, keep)
  labels = Set.new
  nodes = doc.fetch('nodes', [])
  matching = Array.new(nodes.size, false)
  nodes.each_index do |k|
    label = nodes[k].fetch('label', '')
    patterns.each do |p|
      if p.match(label)
        matching[k] = true
        labels.add label
        break
      end
    end
  end
  doc['nodes'] = prune_array(nodes, matching, keep)
  edges = doc.fetch('edges', [])
  matching = Array.new(edges.size, false)
  edges.each_index do |k|
    between = edges[k].fetch('between', [])
    if between.size != 2
      matching[k] = keep # Removing these suppresses later warnings.
    elsif keep
      matching[k] = (labels.member?(between[0]) and labels.member?(between[1]))
    else
      matching[k] = (labels.member?(between[0]) or labels.member?(between[1]))
    end
  end
  doc['edges'] = prune_array(edges, matching, keep)
end

$INPUT = nil
$OUTPUT = nil
$KEEP = false

def main
  ENV['POSIXLY_CORRECT'] = '1' # Leaves patterns as they are.
  parser = OptionParser.new do |opts|
    opts.summary_indent = '  '
    opts.summary_width = 26
    opts.banner = "Usage: diagrammatron-prune [options] patterns..."
    opts.separator ""
    opts.separator "Options:"
    opts.on('-i', '--input FILE', 'Input file name. By default stdin.') do |filename|
      $INPUT = filename
    end
    opts.on('-o', '--output FILE', 'Output file name. By default stdout.') do |filename|
      $OUTPUT = filename
    end
    opts.on('-r', '--reverse', 'Keep nodes that match patterns.') do
      $KEEP = true
    end
    opts.on('-h', '--help', 'Print this help and exit.') do
      $stdout.puts opts
      $stdout.puts %Q(
Patterns are strings used to create Ruby Regexps.

Input YAML file is expected to be dot_json2diagrammatron output.

Output is the input file with nodes that have labels that match patterns
removed or kept depending on options. Edges to removed nodes are removed.
)
      exit 0
    end
  end
  parser.parse! ARGV

  begin
    patterns = ARGV.map { |p| Regexp.new(p) }
  rescue StandardError => e
    $stderr.puts "Error creating Regexp: #{e.to_s}"
    return 1
  end
  doc = load_source
  return 2 if doc.nil?

  begin
    prune(doc, patterns, $KEEP)
  rescue StandardError => e
    $stderr.puts "Error processing input."
    return 3
  end

  begin
    if $OUTPUT.nil?
      $stdout.puts YAML.dump(doc)
    else
      fp = Pathname.new $OUTPUT
      fp.open('w') do |f|
        f.puts YAML.dump(doc)
      end
    end
  rescue StandardError => e
    $stderr.puts e.to_s
    $stderr.puts "Failed to write output: #{$OUTPUT}"
    return 4
  end
  return 0
end

exit(main) if (defined? $unit_test).nil?
