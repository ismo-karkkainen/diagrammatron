#!/usr/bin/env ruby

# Copyright 2021 Ismo Kärkkäinen
# Licensed under Universal Permissive License. See License.txt.

require 'optparse'
require 'yaml'
require 'set'

def vertical(work)
  work[:nodes].each_index do |k|
    node = work[:nodes][k]
    node[:xo] = 0
    node[:yo] = k
    node[:sid] = 0
  end
end

def shortest_paths(work)
  # https://en.wikipedia.org/wiki/Floyd–Warshall_algorithm
  dists = Hash.new(Float::INFINITY)
  work[:edges].each do |edge|
    edge = edge[:between]
    dists[edge] = 1
    dists[edge.reverse] = 1
  end
  nodes = work[:nodes]
  nodes.each_index do |k|
    dists[[k, k]] = 0
  end
  nodes.each_index do |k|
    nodes.each_index do |i|
      nodes.each_index do |j|
        idx = [i, j]
        cand = dists[[i, k]] + dists[[k, j]]
        if cand < dists[idx]
          dists[idx] = cand
        end
      end
    end
  end
  return dists
end

def separate_subdiagrams(work, dists)
  used = Set.new
  subsets = []
  work[:nodes].each_index do |k|
    next if used.include? k
    subset = Set[k]
    used.add k
    work[:nodes].each_index do |n|
      next if k == n
      next if dists[[k, n]] == Float::INFINITY
      subset.add n
      used.add n
    end
    subsets.push(subset.to_a)
  end
  return subsets
end

def place_subset(work, dists, subset, subset_index)
  if subset.size < 3
    work[:nodes][subset[0]][:sid] = subset_index
    work[:nodes][subset[0]][:xo] = 0
    work[:nodes][subset[0]][:yo] = 0
    if subset.size == 2
      work[:nodes][subset[1]][:sid] = subset_index
      work[:nodes][subset[1]][:xo] = 1
      work[:nodes][subset[1]][:yo] = 0
    end
    return
  end
  # Subset distances.
  sd = Hash.new
  subset.each_index do |k|
    subset.each_index do |n|
      sd[[k, n]] = dists[[subset[k], subset[n]]]
    end
  end
  # Use distances as coordinates.
  # Find pair for which there are most unique coordinate pairs.
  maxpair = nil
  maxuniques = nil
  subset.each_index do |k|
    subset.each_index do |n|
      next if n <= k # Same pair in different direction swaps coordinates.
      uniques = Hash.new(0)
      subset.each_index do |p|
        idx = [sd[[k, p]], sd[[n, p]]]
        uniques[idx] = uniques[idx] + 1
      end
      better = false
      compares = (maxuniques.nil? ? 0 : maxuniques.size) <=> uniques.size
      if compares < 0
        better = true
      elsif compares == 0
        # We want to avoid lots of nodes in the same location.
        compares = uniques.values.max <=> maxuniques.values.max
        if compares < 0
          better = true
        elsif compares == 0
          # This could be better main tie-breaker than simple maximum.
          compares = uniques.values.sum { |v| v * v }
          better = compares < maxuniques.values.sum { |v| v * v }
        end
      end
      if better
        maxcover = uniques.keys.size
        maxuniques = uniques
        maxpair = [k, n]
      end
    end
  end
  subset.each_index do |p|
    work[:nodes][subset[p]][:sid] = subset_index
    xo = (sd[[maxpair[0], p]] + 1) * 5 * subset.size
    yo = (sd[[maxpair[1], p]] + 1) * 5 * subset.size
    work[:nodes][subset[p]][:xo] = xo
    work[:nodes][subset[p]][:yo] = yo
  end
end

def coordinate_collisions(work, subset)
  collisions = Hash.new
  subset.each do |p|
    xo = work[:nodes][p][:xo]
    yo = work[:nodes][p][:yo]
    c = [xo, yo]
    collisions[c] = [] unless collisions.has_key? c
    collisions[c].push(p)
  end
  return collisions
end

def shifts(count)
  side = (count / 2.0).ceil
  side = ((side / 4) + ((side % 4 > 0) ? 1 : 0)) * 4
  xs = Array.new(side) { |index| Integer((index - side / 2).round) }
  (0..3).each { |k| xs.push(-xs[k]) }
  ys = Array.new(xs)
  xs.rotate!(side / 2 - 1)
  ys.rotate!(side - 1) # First half-way to offset with xs, then like xs.
  return [ xs, ys ]
end

def spread(work, indexes)
  indexes.sort()
  xs, ys = shifts(indexes.size - 1)
  step = xs.size / (indexes.size - 1.0)
  loc = 0.0
  indexes.each_index do |k|
    next if k == 0
    node_index = indexes[k]
    idx = loc.round
    loc += step
    work[:nodes][node_index][:xo] += xs[idx]
    work[:nodes][node_index][:yo] += ys[idx]
  end
end

def uniques(nodes, subset, key, ortho)
  u = Hash.new
  subset.each do |p|
    c = nodes[p][key]
    u[c] = [] unless u.has_key? c
    u[c].push(nodes[p][ortho])
  end
  u.each_value { |v| v.sort! }
  return u
end

def overlap(a, b)
  seen = Set.new(a)
  b.each do |v|
    return true if seen.add?(v).nil?
  end
  return false
end

def combinable(coords)
  c = Hash.new
  ordered = coords.keys.sort
  ordered.each_index do |k|
    n = k + 1
    break if n == ordered.size
    next if overlap(coords[ordered[k]], coords[ordered[n]])
    c[ordered[k]] = {
      :size => coords[ordered[k]].size + coords[ordered[n]].size,
      :next => ordered[n]
    }
  end
  return c
end

def find_shortest(combinables)
  cand = nil
  combinables.each_pair do |coord, v|
    cand = coord if cand.nil? or v[:size] < combinables[cand][:size]
  end
  return cand
end

def combine(work, subset, coord, eliminated, key)
  subset.each do |p|
    node = work[:nodes][p]
    next unless node[key] == eliminated
    node[key] = coord
  end
end

def reduce(work, subset)
  # Loop checking both directions until there is nothing to combine.
  while true
    cx = combinable(uniques(work[:nodes], subset, :xo, :yo))
    cy = combinable(uniques(work[:nodes], subset, :yo, :xo))
    # To avoid rows/columns with few nodes, take shortest combination first.
    xcand = find_shortest(cx)
    ycand = find_shortest(cy)
    cand = nil
    c = nil
    key = nil
    if xcand.nil?
      break if ycand.nil?
      cand = ycand
      c = cy
      key = :yo
    else
      if ycand.nil? or cy[ycand][:size] <= cx[xcand][:size]
        cand = xcand
        c = cx
        key = :xo
      else
        cand = xcand
        c = cx
        key = :xo
      end
    end
    combine(work, subset, cand, c[cand][:next], key)
  end
end

def remap(work, subset, key)
  coords = Set.new
  subset.each { |p| coords.add(work[:nodes][p][key]) }
  coords = coords.to_a.sort
  rec = Hash.new
  coords.each_index { |k| rec[coords[k]] = k }
  subset.each do |p|
    work[:nodes][p][key] = rec[work[:nodes][p][key]]
  end
end

def pathlength2coordinates(work)
  dists = shortest_paths(work)
  # Split to connected subsets.
  subsets = separate_subdiagrams(work, dists)
  subsets.each_index do |subset_index|
    subset = subsets[subset_index]
    place_subset(work, dists, subset, subset_index)
  end
  subsets.each_index do |subset_index|
    subset = subsets[subset_index]
    collisions = coordinate_collisions(work, subset)
    # Check collisions and spread them out.
    collisions.each_value do |indexes|
      next unless indexes.size > 1
      spread(work, indexes)
    end
    reduce(work, subset)
    remap(work, subset, :xo)
    remap(work, subset, :yo)
  end
  # Placing separate subsets in relation to each other is done separately.
end

$algorithms = {
  'pathlength' => method(:pathlength2coordinates),
  'vertical' => method(:vertical)
}

def load_source
  begin
    if $INPUT.nil?
      src = YAML.load($stdin)
    else
      src = YAML.load(File.read($INPUT))
    end
  rescue Errno::ENOENT => e
    $stderr.puts "Could not load #{$INPUT.nil? ? 'stdin' : $INPUT}"
    return nil
  rescue StandardError => e
    $stderr.puts e.to_s
    $stderr.puts "Failed to read #{$INPUT.nil? ? 'stdin' : $INPUT}"
    return nil
  end
  return src
end

def work_copy(src)
  work = { :edges => [], :nodes => [] }
  # Expected nodes, edges. Other pass-through.
  label2idx = Hash.new
  errors = false
  edge_nodes = Set.new
  edges = src.fetch('edges', [])
  unedges = []
  selfedges = []
  edges.each_index do |k|
    edge = edges[k]
    labels = edge.fetch('between', [])
    if labels.nil? or labels.size == 0
      unedges.push(k)
    elsif labels.size == 2
      if labels.first == labels.last
        selfedges.push(k)
      else
        edge_nodes.add labels.first
        edge_nodes.add labels.last
        work[:edges].push({ :idx => k, :between => [ labels[0], labels[1] ] })
      end
    else
      $stderr.puts "Edge #{k + 1} does not have two labels in 'between'"
      errors = true
      next
    end
  end
  labeled_nodes = Set.new
  unlabeled = []
  nodes = src.fetch('nodes', [])
  nodes.each_index do |k|
    work[:nodes].push({ :idx => k })
    node = nodes[k]
    unless node.has_key? 'label'
      unlabeled.push k
      next
    end
    label = node['label']
    if label2idx.has_key?(label) and edge_nodes.has_key? label
      $stderr.puts "Edge-referred label used twice: #{label}"
      errors = true
    end
    label2idx[label] = k
    labeled_nodes.add label
  end
  missing = edge_nodes - labeled_nodes
  unless missing.empty?
    $stderr.puts "Edges refer to missing node labels: #{missing.to_a.join(' ')}"
    errors = true
  end
  return nil if errors
  unused = labeled_nodes - edge_nodes
  [ [ unused.to_a, 'unconnected labeled nodes' ],
    [ unlabeled, 'unlabeled nodes' ],
    [ selfedges, 'edges from node to itself' ],
    [ unedges, 'edges without end-points' ]
  ].each do |x|
    next if $QUIET or x.first.empty?
    $stderr.puts("Note, #{x.last}: #{x.first.join(' ')}")
  end
  work[:edges].each do |edge|
    edge[:between][0] = label2idx[edge[:between][0]]
    edge[:between][1] = label2idx[edge[:between][1]]
    edge[:between].reverse! if edge[:between][1] < edge[:between][0]
  end
  return work
end

def prepare_output(doc, work)
  work[:nodes].each do |node|
    doc['nodes'][node[:idx]]['xo'] = node[:xo]
    doc['nodes'][node[:idx]]['yo'] = node[:yo]
    doc['nodes'][node[:idx]]['sid'] = node[:sid]
  end
end

$INPUT = nil
$OUTPUT = nil
$ALGO = 'pathlength'
$QUIET = false

def main
  parser = OptionParser.new do |opts|
    opts.summary_indent = '  '
    opts.summary_width = 26
    opts.banner = "Usage: diagrammatron-nodes [options]"
    opts.separator ""
    opts.separator "Options:"
    opts.on('-a', '--algorithm NAME', "Node placement algoritm. Default #{$ALGO}") do |algo|
      $ALGO = algo
    end
    opts.on('-i', '--input FILE', 'Input file name. By default stdin.') do |filename|
      $INPUT = filename
    end
    opts.on('-o', '--output FILE', 'Output file name. By default stdout.') do |filename|
      $OUTPUT = filename
    end
    opts.on('-q', '--quiet', 'No output except errors.') do
      $QUIET = true
    end
    opts.on('-h', '--help', 'Print this help and exit.') do
      $stdout.puts opts
      $stdout.puts %Q(
Algorithm names are: #{$algorithms.keys.sort.join(' ')}

Input YAML file is expected to be like:
---
nodes:
  - label: something
  - label: another
  - ignored: "Since no label. Still placed."
  - label: "Unused and ok. Still placed."
edges:
  - between: [ something, another ]
  - between: [ something, something ] # Ignored.
  - between: [ ] # Ignored.
  - ignored: "Since no between."
...
There can be other fields present but they are ignored. The nodes will
receive values xo and yo that indicate horizontal and vertical coordinates.

Output is the input file with 'xo', 'yo' and 'sid' added to each node.
The 'xo' and 'yo' indicate which unique x- and y-coordinate the value is.
The 'sid' indicates the sub-diagram consisting of connected nodes.
)
      exit 0
    end
  end
  parser.parse! ARGV

  unless $algorithms.has_key? $ALGO
    $stderr.puts "Unrecognized algorithm: #{$ALGO}"
    exit(2)
  end
  $ALGO = $algorithms[$ALGO]

  doc = load_source
  exit(2) if doc.nil?

  begin
    work = work_copy(doc)
  rescue StandardError
    work = nil
    $stderr.puts "Error processing input."
  end
  exit(3) if work.nil?

  $ALGO.call(work)
  prepare_output(doc, work)
  begin
    if $OUTPUT.nil?
      $stdout.puts YAML.dump(doc)
    else
      fp = Pathname.new $OUTPUT
      fp.open('w') do |f|
        f.puts YAML.dump(doc)
      end
    end
  rescue StandardError => e
    $stderr.puts e.to_s
    $stderr.puts "Failed to write output: #{$OUTPUT}"
    exit 4
  end
end

if (defined? $unit_test).nil?
  main
end
