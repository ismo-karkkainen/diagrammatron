#!/usr/bin/env ruby

# Copyright 2021 Ismo KÃ¤rkkÃ¤inen
# Licensed under Universal Permissive License. See License.txt.

require 'optparse'
require 'yaml'
require 'set'
require 'pathname'

def load_source
  begin
    if $INPUT.nil?
      src = YAML.load($stdin)
    else
      src = YAML.load(File.read($INPUT))
    end
  rescue Errno::ENOENT => e
    $stderr.puts "Could not load #{$INPUT.nil? ? 'stdin' : $INPUT}"
    return nil
  rescue StandardError => e
    $stderr.puts e.to_s
    $stderr.puts "Failed to read #{$INPUT.nil? ? 'stdin' : $INPUT}"
    return nil
  end
  return src
end

def grep(doc, patterns, keep)
  index2label = Hash.new
  nodes = doc.fetch('nodes', [])
  nodes.each_index do |k|
    node = nodes[k]
    label = node.fetch('label', '')
    patterns.each do |p|
      if p.match(label)
        index2label[k] = label
        break
      end
    end
  end
  labels = Set.new(index2label.values)
  edges = doc.fetch('edges', [])
  matching = Array.new(edges.size, false)
  edges.each_index do |k|
    edge = edges[k]
    edge.fetch('between', []).each do |label|
      if labels.member? label
        matching[k] = true
        break
      end
    end
  end
  nodes = []
  edges = []
  original = doc.fetch('nodes', [])
  original.each_index do |k|
    selected = index2label.has_key? k
    if (keep and selected) or (not(keep) and not(selected))
      nodes.push original[k]
    end
  end
  original = doc.fetch('edges', [])
  original.each_index do |k|
    if (keep and matching[k]) or (not(keep) and not(matching[k]))
      edges.push original[k]
    end
  end
  doc['nodes'] = nodes
  doc['edges'] = edges
end

$INPUT = nil
$OUTPUT = nil
$KEEP = true

def main
  ENV['POSIXLY_CORRECT'] = '1'
  parser = OptionParser.new do |opts|
    opts.summary_indent = '  '
    opts.summary_width = 26
    opts.banner = "Usage: diagrammatron-grep [options] patterns..."
    opts.separator ""
    opts.separator "Options:"
    opts.on('-i', '--input FILE', 'Input file name. By default stdin.') do |filename|
      $INPUT = filename
    end
    opts.on('-o', '--output FILE', 'Output file name. By default stdout.') do |filename|
      $OUTPUT = filename
    end
    opts.on('-r', '--reverse', 'Keep nodes that do not match patterns.') do
      $KEEP = false
    end
    opts.on('-h', '--help', 'Print this help and exit.') do
      $stdout.puts opts
      $stdout.puts %Q(
Patterns are strings used to create Ruby Regexps.

Input YAML file is expected to be dot_json2diagrammatron output.

Output is the input file with nodes that have labels that match patterns
kept or removed depending on options. Edges to removed nodes are removed.
)
      exit 0
    end
  end
  parser.parse! ARGV

  begin
    patterns = ARGV.map do |p|
      Regexp.new(p)
    end
  rescue StandardError => e
    $stderr.puts "Error creating Regexp: #{e.to_s}"
    exit(1)
  end
  doc = load_source
  exit(2) if doc.nil?

  begin
    grep(doc, patterns, $KEEP)
  rescue StandardError => e
    $stderr.puts "Error processing input. #{e.to_s}"
    exit(3)
  end

  begin
    if $OUTPUT.nil?
      $stdout.puts YAML.dump(doc)
    else
      fp = Pathname.new $OUTPUT
      fp.open('w') do |f|
        f.puts YAML.dump(doc)
      end
    end
  rescue StandardError => e
    $stderr.puts e.to_s
    $stderr.puts "Failed to write output: #{$OUTPUT}"
    exit 4
  end
end

if (defined? $unit_test).nil?
  main
end
