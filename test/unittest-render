#!/usr/bin/env ruby

# Copyright 2021 Ismo Kärkkäinen
# Licensed under Universal Permissive License. See LICENSE.txt.

require './unittest.rb'

$unit_test = 0
load '../bin/diagrammatron-render'

$context = 'Coordinate <=>'
a = Coordinate.new({ :x => 0 }, :x, 1)
b = Coordinate.new({ :x => 1 }, :x, 1)
c = Coordinate.new({ :x => 1 }, :x, -1)
d = Coordinate.new({ :x => 1.5 }, :x, 0)
e = Coordinate.new({ :x => 1.2 }, :x, 0)
assert(a <=> b, -1, 'Smaller coordinate first')
assert(b <=> c, 1, 'Decreasing direction first')
assert(d <=> e, 1, 'Smaller fraction first')

$context = 'Coordinate integer'
a = Coordinate.new({ :x => 3.5 }, :x, 0)
assert(a.integer, 3, 'Integer part of coordinate')

$context = 'Coordinate fraction'
assert(a.fraction, 0.5, 'Fractional part of coordinate')

$context = 'end_directions'
p = { 'xo' => 0, 'yo' => 0 }
v = { 'xo' => 0, 'yo' => 1 }
h = { 'xo' => 1, 'yo' => 0 }
assert(end_directions(p, v), [ 0, 1 ], 'Up')
assert(end_directions(v, p), [ 0, -1 ], 'Down')
assert(end_directions(p, h), [ 1, 0 ], 'Right')
assert(end_directions(h, p), [ -1, 0 ], 'Left')

$context = 'push_coords'
xcs = []
ycs = []
c2c = Hash.new(0)
push_coords(xcs, ycs, c2c, p, 1, -1)
assert(xcs.size, 1, 'Pushed x coordinate')
assert(xcs.first.key, 'xo', 'X key xo')
assert(xcs.first.direction, 1, 'X direction 1')
assert(ycs.size, 1, 'Pushed y coordinate')
assert(ycs.first.key, 'yo', 'Y key yo')
assert(ycs.first.direction, -1, 'Y direction -1')
assert(c2c.has_key?([ p['xo'], p['yo'], 'xo', 1 ]), true, 'Up from node')
assert(c2c.has_key?([ p['xo'], p['yo'], 'yo', -1 ]), true, 'Left from node')
push_coords(xcs, ycs, c2c, p, 0, 0)
assert(c2c.size, 2, 'Mid-points not added to coordinate, key, direction')

$context = 'separate_coordinates'
p = { 'xo' => 0, 'yo' => 1 }
v = { 'xo' => 0, 'yo' => 2 }
h = { 'xo' => 1, 'yo' => 2 }
doc = {
  'nodes' => [
    { 'xo' => 0, 'yo' => 1 }
  ],
  'edges' => [
    { 'path' => [ p, v, h ] }
  ]
}
xcs, ycs, c2c = separate_coordinates(doc)
assert(xcs.size, ycs.size, 'Each point in both arrays')
assert(xcs.size, 5, 'Node 2 times for sides and each path point once')
assert(c2c.size, 2, 'Only path ends added to coordinate, key, direction')

$context = 'Styles base_styles'
st = Styles.new({}, {})
ts = {
  'default' => {
    'key' => 'value',
    'key2' => 'value2'
  },
  'other' => {
    'key2' => 'original',
    'key3' => 'value3'
  }
}
a = st.base_styles({}, { 'foo' => ts }, 'foo')
assert(a.dig('default', 'key'), ts.dig('default', 'key'), 'default key')
assert(a.dig('default', 'key2'), ts.dig('default', 'key2'), 'default key2')
assert(a['default'].keys.size, 2, 'No extra keys')
assert(a.dig('other', 'key'), ts.dig('default', 'key'), 'default key in other')
assert(a.dig('other', 'key2'), ts.dig('other', 'key2'), 'other key2')
assert(a.dig('other', 'key3'), ts.dig('other', 'key3'), 'other key3')
assert(a['other'].keys.size, 3, 'other keys')
ds = {
  'default' => {
    'key' => 'value0'
  },
  'another' => {
    'key4' => 'value4'
  }
}
b = st.base_styles(a, { 'foo' => ds }, 'foo')
assert(b.dig('default', 'key'), ds.dig('default', 'key'), 'New default key')
assert(b.dig('default', 'key2'), ts.dig('default', 'key2'), 'Old default key2')
assert(b['default'].keys.size, 2, 'No extra keys')
assert(b.dig('other', 'key'), ts.dig('default', 'key'), 'Same default key in other')
assert(b.dig('other', 'key2'), ts.dig('other', 'key2'), 'Same other key2')
assert(b.dig('other', 'key3'), ts.dig('other', 'key3'), 'Same other key3')
assert(b['other'].keys.size, 3, 'Same other keys')
assert(b.dig('another', 'key'), b.dig('default', 'key'), 'default key in another')
assert(b.dig('another', 'key2'), ts.dig('default', 'key2'), 'another key2')
assert(b.dig('another', 'key4'), ds.dig('another', 'key4'), 'another key4')
assert(b['another'].keys.size, 3, 'another keys')

$context = 'maxima'
doc = {
  'nodes' => [
    { 'xo' => 0, 'yo' => 1, 'w' => 1, 'h' => 4 },
    { 'xo' => 0, 'yo' => 1, 'w' => 3, 'h' => 2 },
    { 'xo' => 2, 'yo' => 3, 'w' => 5, 'h' => 6 }
  ]
}
xmax, ymax = maxima(doc)
assert(xmax[0], 3, 'x 0 maximum is 3')
assert(ymax[1], 4, 'y 1 maximum is 4')
assert(xmax[2], 5, 'x 2 maximum is 5')
assert(ymax[3], 6, 'y 3 maximum is 6')

$context = 'apply_maxima'
apply_maxima(doc, xmax, ymax)
assert(doc['nodes'][0]['w'], doc['nodes'][1]['w'], 'Same width')
assert(doc['nodes'][0]['h'], doc['nodes'][1]['h'], 'Same height')

$context = 'parallel_edge_step_minima'
c2m = parallel_edge_step_minima([
  Coordinate.new({ :c => 1.25 }, :c, 0),
  Coordinate.new({ :c => 1.5 }, :c, 0),
  Coordinate.new({ :c => 1.25 }, :c, 0)
])
assert(c2m.keys, [ 1 ], 'Only one integer coordinate')
assert(c2m.fetch(1, 2), 0.25, 'Minimum is 0.25')

$context = 'remap_coordinates'
d = 6
cs = [
  Coordinate.new({ :c => 0.5 }, :c, 0),
  Coordinate.new({ :c => 1 }, :c, -1),
  Coordinate.new({ :c => 1.5 }, :c, 0),
  Coordinate.new({ :c => 1 }, :c, 1),
  Coordinate.new({ :c => 2.5 }, :c, 0),
  Coordinate.new({ :c => 3 }, :c, -1),
  Coordinate.new({ :c => 3 }, :c, 1),
  Coordinate.new({ :c => 4 }, :c, -1),
  Coordinate.new({ :c => 4 }, :c, 1),
  Coordinate.new({ :c => 5.5 }, :c, 0)
]
remap_coordinates(cs, { 1 => 10, 3 => 13, 4 => 17 },
  { 0 => 1.0, 1 => 0.5, 2 => 0.5, 5 => 1.0 }, d)
assert(cs[0].object[:c], d * 1.5, 'Low edge')
assert(cs[1].object[:c], 12, 'Low first node')
assert(cs[2].object[:c], 17, 'First node center edge')
assert(cs[3].object[:c], 22, 'High first node')
assert(cs[4].object[:c], 28, 'Between nodes edge')
assert(cs[5].object[:c], 34, 'Low center node')
assert(cs[6].object[:c], 47, 'High center node')
assert(cs[7].object[:c], 53, 'Low top node')
assert(cs[8].object[:c], 70, 'High top node')
assert(cs[9].object[:c], 73, 'Top edge')
cs = [
  Coordinate.new({ :c => 1 }, :c, -1),
  Coordinate.new({ :c => 1 }, :c, 1),
  Coordinate.new({ :c => 1 }, :c, 1),
  Coordinate.new({ :c => 2.5 }, :c, 0),
  Coordinate.new({ :c => 2.5 }, :c, 0),
  Coordinate.new({ :c => 3 }, :c, -1),
  Coordinate.new({ :c => 3 }, :c, -1),
  Coordinate.new({ :c => 3 }, :c, 1)
]
remap_coordinates(cs, { 1 => 10, 3 => 13 }, { 2 => 0.5 }, d)
assert(cs[0].object[:c], 6, 'Low first node')
assert(cs[1].object[:c], 16, 'High first node')
assert(cs[2].object[:c], 16, 'Edge low connector')
assert(cs[3].object[:c], 22, 'Edge sidestep')
assert(cs[4].object[:c], 22, 'Edge sidestep 2')
assert(cs[5].object[:c], 28, 'Edge high connector')
assert(cs[6].object[:c], 28, 'Low top node')
assert(cs[7].object[:c], 41, 'High top node')

exit $unit_test
