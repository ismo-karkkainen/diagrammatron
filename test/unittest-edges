#!/usr/bin/env ruby

# Copyright 2021 Ismo Kärkkäinen
# Licensed under Universal Permissive License. See License.txt.

$unit_test = 0
load '../diagrammatron-edges'

$context = ''
def assert(value, expected, message)
  condition = value == expected
  $stdout.puts("#{condition ? 'ok' : 'fail'}: #{$context}: #{message}")
  $stderr.puts("#{value.to_s} != #{expected.to_s}") unless condition
  $unit_test = 1 unless condition
  return condition
end

$context = 'edge_subsets'
subsets = edge_subsets({
  :nodes => [
    { :idx => 0, :sid => 0 },
    { :idx => 1, :sid => 0 },
    { :idx => 2, :sid => 1 },
    { :idx => 3, :sid => 1 }
  ],
  :edges => {
    0 => { :between => [ 0, 1 ] },
    1 => { :between => [ 2, 3 ] }
  }
})
assert(subsets.keys.sort, [ 0, 1 ], "Subsets 0 and 1")

$context = 'Segment reverse'
s = Segment.new(true, 1, [1, 3], 0, [true, false], 1)
r = s.reverse(2)
assert(r.vertical, s.vertical, 'Retains vertical')
assert(r.cc, s.cc, 'Retains constant coordinate')
assert(r.range, s.range.reverse, 'Range reversed')
assert(r.at_node, s.at_node.reverse, 'Reverse at node')
assert(r.segment_index, 2, 'Segment index changed')

$context = 'Segment direction'
s0l = Segment.new(false, 1, [0, 1], 0, [true, false], 0)
s0r = Segment.new(false, 1, [2, 1], 0, [true, false], 0)
s = Segment.new(true, 1, [1, 3], 0, [false, false], 1)
s2r = Segment.new(false, 3, [1, 4], 0, [false, true], 2)
s2l = Segment.new(false, 3, [1, 0], 0, [false, true], 2)
assert(s.direction(nil), 0, 'Segment is nil')
assert(s.direction(s0l), -1, 'Earlier segment from left is decreasing')
assert(s0l.direction(s), 1, 'Previous from preceding segment, increasing')
assert(s.direction(s0r), 1, 'Earlier segment from right is increasing')
assert(s0r.direction(s), 1, 'Previous from preceding segment, increasing')
assert(s.direction(s2r), 1, 'Later segment increasing')
assert(s2r.direction(s), -1, 'Previous from succeeding segment, decreasing')
assert(s.direction(s2l), -1, 'Later segment decreasing')
assert(s2l.direction(s), -1, 'Previous from succeeding segment, decreasing')

$context = 'Segment over_other_node'
sv = Segment.new(true, 1, [1, 3], 0, [true, false], 1)
sh = Segment.new(false, 1, [3, 1], 0, [true, false], 1)
work = {
  :nodes => [
    { :xo => 0, :yo => 0 },
    { :xo => 1, :yo => 1 },
    { :xo => 1, :yo => 3 },
    { :xo => 3, :yo => 1 },
    { :xo => 1, :yo => 2 },
    { :xo => 2, :yo => 1 }
  ]
}
assert(sv.over_other_node(work, [0]), false, 'Node outside vertical')
assert(sh.over_other_node(work, [0]), false, 'Node outside horizontal')
assert(sv.over_other_node(work, [1]), false, 'Node at vertical start, at node')
assert(sv.over_other_node(work, [2]), true, 'Node at vertical end')
assert(sh.over_other_node(work, [3]), false, 'Node at horizontal end, at node')
assert(sv.over_other_node(work, [4]), true, 'Node overlaps vertical middle')
assert(sh.over_other_node(work, [5]), true, 'Node overlaps horizontal middle')

$context = 'Segment cross'
assert(s.cross(s0l), false, 'Before and left not crossed')
assert(s.cross(s0r), false, 'Before and right not crossed')
assert(s.cross(s2l), false, 'After and left not crossed')
assert(s.cross(s2r), false, 'After and right not crossed')
assert(s.cross(Segment.new(false, 2, [0, 2], 0)), true, 'Crosses')
assert(s.cross(Segment.new(false, 2, [2, 0], 0)), true, 'Reverse crosses')
assert(s.cross(Segment.new(false, 2, [2, 3], 0)), false, 'To right')
assert(s.cross(Segment.new(false, 2, [-2, -1], 0)), false, 'To left')
assert(s.cross(Segment.new(false, 4, [0, 2], 0)), false, 'Above')
assert(s.cross(Segment.new(false, 0, [0, 2], 0)), false, 'Below')

$context = 'Segment length'
assert(Segment.new(false, 0, [1, 2], 2, [false, false], 0).length, 1, 'Length')
assert(Segment.new(false, 0, [2, -1], 1, [true, true], 0).length, 3, 'Length reverse')

$context = 'Segment range_overlap'
s = Segment.new(false, 0, [2, 1], 0, [false, false], 0)
sle = Segment.new(false, 0, [0, 1], 0, [false, false], 0)
slt = Segment.new(false, 0, [0, -1], 0, [false, false], 0)
assert(s.range_overlap(s), true, 'Overlaps itself')
assert(s.range_overlap(sle), true, 'Overlaps when same coordinate')
assert(s.range_overlap(slt), false, 'No overlap when to left')
assert(sle.range_overlap(s), true, 'Overlaps when same coordinate 2')
assert(slt.range_overlap(s), false, 'No overlap when to right')

$context = 'Segment increase?'
assert(sle.increase?, true, 'Increasing true')
assert(slt.increase?, false, 'Decreasing false')

$context = 'overlaps_set'
assert(overlaps_set(s, [[sle, 0], [slt, 0]]), true, 'Overlaps on touch')
assert(overlaps_set(s, [[slt, 0]]), false, 'No overlap')

$context = 'segment'
s = segment(0, 1, 0, 2)
assert(s.vertical, true, 'Vertical')
assert(s.cc, 0, 'cc 0')
assert(s.range, [1, 2], 'Range 1, 2')
assert(s.edge_index, 0, 'Edge index 0')
assert(s.at_node, [false, false], 'Segment does not end at node')
assert(s.segment_index, 0, 'Segment index 0')
s = segment(0, 2, 1, 2)
assert(s.vertical, false, 'Horizontal')
assert(s.cc, 2, 'cc 2')
assert(s.range, [0, 1], 'Range 0, 1')

$context = 'Path'
p = Path.new(3, [0, 1])
assert(p.edge_index, 3, 'Edge index 3')

$context = 'Path push'
s = Segment.new(true, 1, [1, 3], 0, [false, false], 1)
p.push(s)
assert(s.edge_index, p.edge_index, 'Edge index set')
assert(p.segments.size, 1, 'One segment present')
p = Path.new(2, [2, 1])
sv = Segment.new(true, 1, [3, 1], 0, [true, false], 0)
sh = Segment.new(false, 1, [1, 3], 0, [false, true], 1)
p.push(sv).push(sh)
assert(p.segments.size, 2, 'Two segments')

$context = 'Path segment_directions'
p = Path.new(2, [2, 1])
sv = Segment.new(true, 1, [3, 1], 0, [true, false], 0)
sh = Segment.new(false, 1, [1, 3], 0, [false, true], 1)
p.push(sv).push(sh)
p.over_other_node(work, [])
s, before, after = p.segment_directions(0)
assert(s, sv, 'First segment')
assert(before, 0, 'Nothing before')
assert(after, 1, 'After increases')
s, before, after = p.segment_directions(1)
assert(s, sh, 'Second segment')
assert(before, 1, 'Before increases')
assert(after, 0, 'Nothing after')

$context = 'Path over_other_node'
work = {
  :nodes => [
    { :xo => 1, :yo => 1 },
    { :xo => 1, :yo => 3 },
    { :xo => 3, :yo => 1 }
  ]
}
p = Path.new(2, [2, 1])
sv = Segment.new(true, 1, [3, 1], 0, [true, false], 0)
sh = Segment.new(false, 1, [1, 3], 0, [false, true], 1)
p.push(sv).push(sh)
p.over_other_node(work, [])
a = []
(0...p.segments.size).each do |k|
  (0..1).each do |n|
    a.push [k, n, false]
  end
end
a.first[2] = true
a.last[2] = true
a.each do |x|
  assert(p.segments[x[0]].at_node[x[1]], x[2], "Segment #{x[0]} end #{x[1]} at node: #{x[2]}")
end
p = Path.new(2, [2, 1])
sv = Segment.new(true, 1, [3, 1], 0, [true, false], 0)
sh = Segment.new(false, 1, [1, 3], 0, [false, true], 1)
p.push(sv).push(sh)
assert(p.over_other_node(work, [1, 2]), false, 'Node at start and end')
assert(p.ends[0], Connection.new(2, 0), 'First segment up')
assert(p.ends[1], Connection.new(1, 1), 'Last segment left')
assert(p.crosses.size, 0, 'Empty crosses set')

$context = 'Path cross'
full = {
  0 => [ Path.new(0, [0, 1]) ],
  1 => [ Path.new(1, [0, 1]) ],
  2 => [ Path.new(2, [2, 3]) ]
}
full[0].first.push(segment(1, 0, 1, 2))
full[1].first.push(segment(1, 0, 1, 2))
full[2].first.push(segment(0, 1, 2, 1))
assert(full[0][0].cross(full[2][0]), true, 'Vertical crosses horizontal')
assert(full[0][0].cross(full[1][0]), false, 'Verticals do not cross')

$context = 'Path store_crossings'
work = {
  :nodes => [
    { :xo => 1, :yo => 0 },
    { :xo => 1, :yo => 2 },
    { :xo => 0, :yo => 1 },
    { :xo => 2, :yo => 1 }
  ]
}
full.each_pair do |edge, cands|
  cands.each do |c|
    c.over_other_node(work, 0...work.size)
  end
end
full[0][0].store_crossings(full[1])
assert(full[0][0].crosses.size, 0, 'No crossings')
full[0][0].store_crossings(full[2])
assert(full[0][0].crosses.size, 1, 'Crossing')
assert(full[0][0].crosses.member?(full[2][0].id), true, 'Crossed id')
assert(full[2][0].crosses.member?(full[0][0].id), true, 'Crosser id')

$context = 'Path as_steps'
n = { :xo => 0, :yo => 0 }
nll = { :xo => -1, :yo => 0 }
pll = Path.new(0, [0, 1]).push(segment(0, 0, 0, 1)).push(segment(0, 1, -1, 1)).push(segment(-1, 1, -1, 0))
pll.over_other_node({ :nodes => [n, nll] }, [])
assert(pll.as_steps(pll.ends[0]), [ 1, -1, 1, -1, 1 ], 'up, 2 left, steps 1')
assert(pll.as_steps(pll.ends[1]), [ 1, 1, 1, 1, 1 ], 'up, 2 right, steps 1')
pll = Path.new(0, [0, 1]).push(segment(0, 0, 0, -1)).push(segment(0, -1, 1, -1)).push(segment(1, -1, 1, 0))
pll.over_other_node({ :nodes => [n, nll] }, [])
assert(pll.as_steps(pll.ends[0]), [ 1, -1, 1, -1, 1 ], 'down, 2 left, steps 1')
assert(pll.as_steps(pll.ends[1]), [ 1, 1, 1, 1, 1 ], 'down, 2 right, steps 1')
pll = Path.new(0, [0, 1]).push(segment(0, 0, -1, 0)).push(segment(-1, 0, -1, -1)).push(segment(-1, -1, 0, -1))
pll.over_other_node({ :nodes => [n, nll] }, [])
assert(pll.as_steps(pll.ends[0]), [ 1, -1, 1, -1, 1 ], 'left, 2 left, steps 1')
assert(pll.as_steps(pll.ends[1]), [ 1, 1, 1, 1, 1 ], 'left, 2 right, steps 1')
pll = Path.new(0, [0, 1]).push(segment(0, 0, 1, 0)).push(segment(1, 0, 1, 1)).push(segment(1, 1, 0, 1))
pll.over_other_node({ :nodes => [n, nll] }, [])
assert(pll.as_steps(pll.ends[0]), [ 1, -1, 1, -1, 1 ], 'right, 2 left, steps 1')
assert(pll.as_steps(pll.ends[1]), [ 1, 1, 1, 1, 1 ], 'right, 2 right, steps 1')

$context = 'bend_order'
assert(bend_order([ 1 ], [ 2 ]), -1, 'Shorter direct first')
assert(bend_order([ 1, 1, 1 ], [ 1, -1, 1 ]), 1, 'Turn left first')
assert(bend_order([ 1, -1, 1 ], [ 1, -1, 1, -1, 1 ]), 1, '2 left first')
assert(bend_order([ 1, -1, 1, -1, 1 ], [ 1, -1, 1, 1, 1 ]), -1, '2 left first')
assert(bend_order([ 2, -1, 1 ], [ 1, -1, 1 ]), 1, 'Short before long left')
assert(bend_order([ 1 ], [ 1, -1, 1 ]), 1, 'Left before straight')
assert(bend_order([ 2 ], [ 1 ]), 1, 'Short before long straight')
assert(bend_order([ 2, 1, 1 ], [ 1, 1, 1 ]), -1, 'Long before short right')
assert(bend_order([ 1, 1, 2, 1, 1 ], [ 1, 1, 1, 1, 1 ]), -1, 'Long before short right 2')

$context = 'condidates'
work = {
  :nodes => [
    { :xo => 2, :yo => 2 }, { :xo => 4, :yo => 2 }, { :xo => 6, :yo => 2 },
    { :xo => 2, :yo => 4 }, { :xo => 4, :yo => 4 }
  ]
}
c = candidates(0, 1, 1, work, 0...5)
assert(c.size, 3, '3 candidates')
c = candidates(0, 2, 1, work, 0...5)
assert(c.size, 2, '2 candidates')
c = candidates(0, 3, 1, work, 0...5)
assert(c.size, 3, '3 candidates')
c = candidates(0, 4, 1, work, 0...5)
assert(c.size, 12, '12 candidates')
c = candidates(2, 4, 1, work, 0...5)
assert(c.size, 15, '15 candidates')

$context = 'keep_direct_and_singletons'
c = {
  0 => candidates(0, 1, 0, work, 0...5),
  1 => candidates(0, 2, 1, work, 0...5),
  2 => [ candidates(2, 4, 2, work, 0...5)[0] ]
}
keep_direct_and_singletons(c)
assert(c[0].size, 1, 'Direct remains')
assert(c[0].first.segments.size, 1, 'One segment path')
assert(c[1].size, 2, 'No changes')
assert(c[2].size, 1, 'Single remains')
assert(c[2].first.segments.size > 1, true, 'Not direct')

$context = 'store_crossings'
full = {
  0 => [ Path.new(0, [0, 1]).push(segment(1, 0, 1, 2)) ],
  1 => [ Path.new(1, [0, 1]).push(segment(1, 0, 1, 2)) ],
  2 => [ Path.new(2, [2, 3]).push(segment(0, 1, 2, 1)) ]
}
work = {
  :nodes => [
    { :xo => 1, :yo => 0 },
    { :xo => 1, :yo => 2 },
    { :xo => 0, :yo => 1 },
    { :xo => 2, :yo => 1 }
  ]
}
full.each_pair do |edge, cands|
  cands.each do |c|
    c.over_other_node(work, 0...work.size)
  end
end
store_crossings(full)
assert(full[0][0].crosses.size, 1, 'One crossed')
assert(full[0][0].crosses.member?(full[2][0].id), true, 'Vertical crossed')
assert(full[1][0].crosses.size, 1, 'One crossed')
assert(full[1][0].crosses.member?(full[2][0].id), true, 'Vertical crossed')
assert(full[2][0].crosses.size, 2, 'Two crossed')
assert(full[2][0].crosses.member?(full[0][0].id), true, 'Horizontal crossed')
assert(full[2][0].crosses.member?(full[1][0].id), true, 'Horizontal second crossed')

$context = 'keep_least_crossing'
work = {
  :nodes => [
    { :xo => 1, :yo => 0 },
    { :xo => 1, :yo => 2 },
    { :xo => 0, :yo => 1 },
    { :xo => 2, :yo => 1 }
  ]
}
full = {
  0 => [
    Path.new(0, [0, 1]).push(segment(1, 0, 1, 2)),
    Path.new(0, [0, 1]).push(segment(1, 0, 3, 0)).push(segment(3, 0, 3, 2)).push(segment(3, 2, 1, 2))
  ],
  1 => [
    Path.new(1, [0, 1]).push(segment(1, 0, 1, 2)),
    Path.new(1, [0, 1]).push(segment(1, 0, 1, -2)).push(segment(1, -2, -1, -2)).push(segment(-1, -2, -1, 3)).push(segment(-1, 3, 1, 3)).push(segment(1, 3, 1, 2))
  ],
  2 => [
    Path.new(2, [2, 3]).push(segment(0, 1, 2, 1))
  ],
  3 => [
    Path.new(3, [3, 2]).push(segment(2, 1, 0, 1))
  ]
}
full.each_pair do |edge, cands|
  cands.each do |c|
    c.over_other_node(work, 0...work.size)
  end
end
chosen = keep_least_crossing(full)
assert(chosen[0].segments.size, 3, 'Chose non-crossing 3-segment path')
assert(chosen[1].segments.size, 5, 'Chose non-crossing 5-segment path')
assert(chosen[2].segments.size, 1, 'Chose non-crossing 1-segment path')
assert(chosen[3].segments.size, 1, 'Chose non-crossing 1-segment reverse path')

$context = 'node_and_side_sets'
ns = node_and_side_sets(chosen)
assert(ns.has_key?(Connection.new(0, 1)), true, '0 leaves right')
assert(ns.has_key?(Connection.new(1, 1)), true, '1 enters right')
assert(ns.has_key?(Connection.new(0, 2)), true, '0 leaves down')
assert(ns.has_key?(Connection.new(1, 0)), true, '1 enters down')
assert(ns.has_key?(Connection.new(2, 1)), true, '2 leaves right')
assert(ns[Connection.new(2, 1)].index(full[3][0]).nil?, false, '2 enters right')
assert(ns.has_key?(Connection.new(3, 3)), true, '3 enters left')
assert(ns[Connection.new(2, 1)].index(full[3][0]).nil?, false, '3 leaves left')

$context = 'segment_order'
assert(segment_order([ segment(1, 0, 2, 0), 0 ], [ segment(2, 0, 4, 0), 1 ]),
  -1, 'Smaller group first')
assert(segment_order([ segment(2, 0, 4, 0), 2 ], [ segment(3, 0, 5, 0), 1 ]),
  1, 'Greater group last')
assert(segment_order([ segment(1, 0, 2, 0), 0 ], [ segment(2, 0, 4, 0), 0 ]),
  -1, 'Shorter first in group 0')
assert(segment_order([ segment(2, 0, 4, 0), 0 ], [ segment(3, 0, 5, 0), 0 ]),
  -1, 'Lower first if same length in group 0')
a = [ segment(3, 0, 5, 0), 0 ]
a.first.edge_index = 2
b = [ segment(3, 0, 5, 0), 0 ]
b.first.edge_index = 1
assert(segment_order(a, b), 1, 'Smaller edge index first, group 0')
assert(segment_order([ segment(1, 0, 2, 0), 1 ], [ segment(2, 0, 5, 0), 1 ]),
  -1, 'Lower first in group 1')
assert(segment_order([ segment(1, 0, 2, 0), 1 ], [ segment(1, 0, 5, 0), 1 ]),
  -1, 'Shorter first in group 1')
a = [ segment(3, 0, 5, 0), 1 ]
a.first.edge_index = 1
b = [ segment(3, 0, 5, 0), 1 ]
b.first.edge_index = 2
assert(segment_order(a, b), -1, 'Smaller edge index first, group 1')
assert(segment_order([ segment(1, 0, 2, 0), 2 ], [ segment(2, 0, 5, 0), 2 ]),
  1, 'Higher end first in group 2')
assert(segment_order([ segment(-1, 0, 2, 0), 2 ], [ segment(1, 0, 2, 0), 2 ]),
  -1, 'Longer first in group 2')
a = [ segment(3, 0, 5, 0), 2 ]
a.first.edge_index = 1
b = [ segment(3, 0, 5, 0), 2 ]
b.first.edge_index = 2
assert(segment_order(a, b), -1, 'Smaller edge index first, group 2')
assert(segment_order([ segment(1, 0, 2, 0), 3 ], [ segment(1, 0, 5, 0), 3 ]),
  1, 'Longer first in group 3')
assert(segment_order([ segment(1, 0, 2, 0), 3 ], [ segment(4, 0, 5, 0), 3 ]),
  1, 'Higher end first in group 3')

exit $unit_test
