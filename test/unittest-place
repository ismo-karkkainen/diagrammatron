#!/usr/bin/env ruby

# Copyright 2021 Ismo Kärkkäinen
# Licensed under Universal Permissive License. See LICENSE.txt.

$unit_test = 0
load '../bin/diagrammatron-place'
$QUIET = true

$context = ''
def assert(value, expected, message)
  condition = value == expected
  $stdout.puts("#{condition ? 'ok' : 'fail'}: #{$context}: #{message}")
  $stderr.puts("#{value.to_s} != #{expected.to_s}") unless condition
  $unit_test = 1 unless condition
  return condition
end

def assertf(value, expected, message)
  condition = (value - expected).abs < Float::EPSILON * 16
  $stdout.puts("#{condition ? 'ok' : 'fail'}: #{$context}: #{message}")
  $stderr.puts("#{value.to_s} != #{expected.to_s}") unless condition
  $unit_test = 1 unless condition
  return condition
end

def data
  YAML.load(%q(---
nodes:
- label: one
  sid: 0
  xo: 0
  yo: 0
- sid: 0
  xo: 2
  yo: 0
- label: three
  sid: 0
  xo: 4
  yo: 0
- sid: 0
  yo: 0
edges:
- path:
  - xo: 0.666
    yo: 0
  - xo: 0.666
    yo: 1.333
  - xo: 4.5
    yo: 1.5
  - xo: 4.333
    yo: 0
  sid: 0
- between:
  - two
  - one
  path:
  - xo: 2
    yo: 0.5
  - xo: 0
    yo: 0.5
- between:
  - three
  - two
  path:
  - xo: 4
    yo: 0.5
  - xo: 2
    yo: 0.5
  sid: 0
- between:
  - three
  - one
  sid: 0))
end

$context = 'work_copy'
w = work_copy(data)
assert(w[:nodes].keys, [ 0 ], 'Node subset found')
assert(w[:edges].keys, [ 0 ], 'Edge subset found')
assert(w[:subsets], [ 0 ], 'Subsets found')
assert(w[:nodes][0].map() { |n| n.index }, [0,1,2], '3 nodes')
assert(w[:edges][0].map() { |e| e.index }, [0,2], '2 edges')

$context = 'Edge bounding_box'
e = Edge.new(0, 1, [
  { 'xo' => 0.1, 'yo' => 1 },
  { 'xo' => 4.2, 'yo' => 3.2 },
  { 'xo' => 2.1, 'yo' => 5.9 }
])
eb = e.bounding_box
assert(eb.xmin, 0, 'x minimum is 0')
assert(eb.ymin, 1, 'y minimum is 1')
assert(eb.xmax, 4, 'x maximum is 4')
assert(eb.ymax, 5, 'y maximum is 5')

$context = 'Edge shift'
e.shift(-1, 1)
ebs = e.bounding_box
assert(eb.xmin - ebs.xmin, 1, 'x minimum shifted by -1')
assert(eb.xmax - ebs.xmax, 1, 'x maximum shifted by -1')
assert(eb.ymin - ebs.ymin, -1, 'x maximum shifted by 1')
assert(eb.ymax - ebs.ymax, -1, 'x maximum shifted by 1')

$context = 'Node bounding_box'
n = Node.new(0, 1, 3, 7)
nb = n.bounding_box
assert(nb.xmin, nb.xmax, 'x limits equal')
assert(nb.ymin, nb.ymax, 'y limits equal')
assert(nb.xmin, n.xo, 'x coordinate matches')
assert(nb.ymin, n.yo, 'y coordinate matches')

$context = 'Node shift'
n.shift(1, -1)
assert(n.xo, 4, 'x increased by 1')
assert(n.yo, 6, 'y decreased by 1')

$context = 'BoundingBox merge'
bb = eb.merge(nb)
assert(bb.ymax, nb.ymax, 'Box expanded')
assert(bb.xmin, eb.xmin, 'y minimum unchanged')
assert(bb.xmax, eb.xmax, 'y maximum unchanged')
ba = nb.merge(eb)
assert(bb, ba, 'Merge direction does not matter')
bb = nb.merge(nil)
assert(bb, nb, 'Merge with nil does nothing')

$context = 'BoundingBox width'
assert(BoundingBox.new(0, 2, 1, 4).width, 1, 'Width 1')

$context = 'BoundingBox height'
assert(BoundingBox.new(0, 2, 1, 4).height, 2, 'Height 2')

$context = 'BoundingBox area'
assert(BoundingBox.new(0, 2, 1, 4).area, 2, 'Area 2')

$context = 'BoundingBox shift'
b = BoundingBox.new(0, 1, 3, 4)
b.shift(2, -2)
assert(b.xmin, 2, 'xmin increased by 2')
assert(b.ymin, -1, 'ymin decreased by 2')
assert(b.xmax, 5, 'xmax increased by 2')
assert(b.ymax, 2, 'ymax decreased by 2')

$context = 'BoundingBox short_side'
assert(BoundingBox.new(0, 1, 3, 5).short_side, 3, 'Short side 3')

$context = 'BoundingBox long_side'
assert(BoundingBox.new(0, 1, 3, 5).long_side, 4, 'Long side 4')

$context = 'bounding_box'
w = work_copy(data)
bb = bounding_box(w, 0)
assert(bb.xmin, 0, 'x minimum 0')
assert(bb.ymin, 0, 'y minimum 0')
assert(bb.xmax, 5, 'x maximum with space 5')
assert(bb.ymax, 2, 'y maximum with space 2')

$context = 'area_order'
order = area_order({
  0 => BoundingBox.new(1, 1, 2, 4),
  1 => BoundingBox.new(1, 1, 2, 2),
  2 => BoundingBox.new(1, 1, 2, 3)
})
assert(order.map() { |x| x[0] }, [0, 2, 1], 'Area sort works')

$context = 'shift'
o = work_copy(data)
w = work_copy(data)
shift(w, 0, -1, 1)
origs = o[:nodes].fetch(0, [])
shifted = w[:nodes].fetch(0, [])
(0...origs.size).each do |k|
  assertf(shifted[k].xo - origs[k].xo, -1, "Node #{k} horizontal shift -1")
  assertf(shifted[k].yo - origs[k].yo, 1, "Node #{k} vertical shift 1")
end
origs = o[:edges].fetch(0, [])
shifted = w[:edges].fetch(0, [])
(0...origs.size).each do |k|
  op = origs[k].path
  sp = shifted[k].path
  (0...op.size).each do |n|
    assertf(sp[n]['xo'] - op[n]['xo'], -1, "Edge #{k} point #{n} horizontal shift -1")
    assertf(sp[n]['yo'] - op[n]['yo'], 1, "Edge #{k} point #{n} vertical shift 1")
  end
end

$context = 'overlaps'
s = { 0 => BoundingBox.new(1, 1, 3, 3), 1 => BoundingBox.new(4, 1, 5, 3) }
assert(overlaps(s, BoundingBox.new(3, 2, 5, 3)), true, 'Overlaps')
assert(overlaps(s, BoundingBox.new(3, 2, 4, 3)), false, 'Does not overlap')

$context = 'State key?'
s = State.new({ 1 => 0 }, BoundingBox.new(0, 0, 2, 2), 3, 2)
assert(s.key?([1, nil]), true, 'Finds key 1')
assert(s.key?([0, nil]), false, 'No key 0')

$context = 'State can_improve?'
s = State.new({}, BoundingBox.new(0, 0, 2, 2), 3, 2)
s2 = State.new({}, BoundingBox.new(0, 0, 3, 2), 0, 0)
assert(s.can_improve?(s2), true, 'Can improve')
s = State.new({}, BoundingBox.new(0, 0, 2, 3), 3, 2)
assert(s.can_improve?(s2), false, 'Can not improve')

$context = 'depth_first_search'
o = [
  [ 0, BoundingBox.new(0, 0, 2, 2) ],
  [ 2, BoundingBox.new(0, 0, 3, 1) ],
  [ 1, BoundingBox.new(0, 0, 1, 2) ]
]
s = {
  0 => BoundingBox.new(0, 0, 2, 2),
  2 => BoundingBox.new(0, 2, 3, 3),
  1 => BoundingBox.new(2, 0, 3, 2)
}
s0 = State.new(s, BoundingBox.new(0, 0, 3, 3), 9, 0)
st = depth_first_search(o, s0, nil)
assert(st, s0, 'Input state when all placed')
s0.state.delete(1)
s0.used = 7
s0.remaining_area = 2
s0 = depth_first_search(o, s0, nil)
assert(st, s0, 'Optimal state')

$context = 'prepare_output'
d = data
w = work_copy(d)
shift(w, 0, -1, 1)
prepare_output(d, w)
shifted = w[:nodes].fetch(0, [])
(0...shifted.size).each do |k|
  out = d['nodes'][shifted[k].index]
  assertf(shifted[k].xo, out['xo'], "Node #{k} horizontal shift")
  assertf(shifted[k].yo, out['yo'], "Node #{k} vertical shift")
end
shifted = w[:edges].fetch(0, [])
(0...shifted.size).each do |k|
  op = d['edges'][shifted[k].index]['path']
  sp = shifted[k].path
  (0...sp.size).each do |n|
    assertf(sp[n]['xo'], op[n]['xo'], "Edge #{k} point #{n} horizontal shift")
    assertf(sp[n]['yo'], op[n]['yo'], "Edge #{k} point #{n} vertical shift")
  end
end

exit $unit_test
