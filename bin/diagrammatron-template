#!/usr/bin/env ruby
# frozen_string_literal: true

# Copyright © 2021, 2022 Ismo Kärkkäinen
# Licensed under Universal Permissive License. See LICENSE.txt.

require_relative '../lib/common'
require 'optparse'
require 'yaml'
require 'set'
require 'pathname'
require 'base64'


def add_field(doc, field_name, content)
  if field_name.start_with?('base64')
    doc[field_name] = content
  else
    doc["base64#{field_name}"] = Base64.strict_encode64(content)
  end
end

def missing(doc)
  %w[defaults sizes template].each do |key|
    next if doc.key? key
    next if doc.key? "base64#{key}"
    return aargh("#{key} is missing", 4)
  end
  nil
end

def main
  input = nil
  output = nil
  ENV['POSIXLY_CORRECT'] = '1' # Leaves patterns as they are.
  parser = OptionParser.new do |opts|
    opts.summary_indent = '  '
    opts.summary_width = 20
    opts.banner = 'Usage: diagrammatron-template [options] field-name content-file ...'
    opts.separator ''
    opts.separator 'Options:'
    opts.on('-r', '--root FILE', 'Starting point YAML file name.') do |filename|
      input = filename
    end
    opts.on('-o', '--output FILE', 'Output file name. Write to stdout if not given.') do |filename|
      output = filename
    end
    opts.on('-h', '--help', 'Print this help and exit.') do
      $stdout.puts %(#{opts}
Pairs all parameter field-names with content-files contents, starting with
either given root YAML file or with an empty root.

Any field name either in root document or in parameters is trusted to be
base-64 encoded without further checking.

Outputs a YAML-file that case be used with diagrammatron-render as a template.
All fields are base64-encoded for safety. diagrammatron-render will decode
them and rename the fields by removing the base64 prefix.

Presence of "defaults", "sizes", and "template" fields is checked for.
Extra fields are not restricted in any manner.
)
      exit 0
    end
  end
  parser.parse! ARGV

  if ARGV.size.odd?
    return aargh('Field-names and content-files count is odd.', 1)
  end

  doc = input.nil? ? {} : load_source_hash(input)
  return 2 if doc.nil?

  (0...ARGV.size).step(2) do |k|
    fn = ARGV[k]
    cfn = ARGV[k + 1]
    begin
      c = File.read(cfn)
    rescue Errno::ENOENT
      return aargh("Could not read #{cfn}", 3)
    rescue StandardError => e
      return aargh([ e, "Failed to read #{cfn}" ], 3)
    end
    add_field(doc, fn, c)
  end

  m = missing(doc)
  return m unless m.nil?

  dump_result(output, YAML.dump(doc, line_width: 1_000_000), 5)
end

exit(main) if (defined? $unit_test).nil?
