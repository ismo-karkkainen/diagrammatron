#!/usr/bin/env ruby
# frozen_string_literal: true

# Copyright © 2021 Ismo Kärkkäinen
# Licensed under Universal Permissive License. See LICENSE.txt.

require 'optparse'
require 'yaml'
require 'set'
require 'pathname'

def aargh(message, return_value = nil)
  $stderr.puts message
  return_value
end

def load_source(input)
  YAML.safe_load(input.nil? ? $stdin : File.read(input))
rescue Errno::ENOENT
  aargh("Could not load #{input || 'stdin'}")
rescue StandardError => e
  aargh("#{e}\nFailed to read #{input || 'stdin'}")
end

def prune_array(original, matching, keep)
  kept = []
  original.each_index do |k|
    if (keep && matching[k]) || (!keep && !matching[k])
      kept.push original[k]
    end
  end
  kept
end

def prune(doc, patterns, keep)
  labels = Set.new
  nodes = doc.fetch('nodes', [])
  matching = Array.new(nodes.size, false)
  nodes.each_index do |k|
    label = nodes[k].fetch('label', '')
    patterns.each do |p|
      next unless p.match(label)
      matching[k] = true
      labels.add label
      break
    end
  end
  doc['nodes'] = prune_array(nodes, matching, keep)
  edges = doc.fetch('edges', [])
  matching = Array.new(edges.size, false)
  edges.each_index do |k|
    between = edges[k].fetch('between', [])
    if between.size != 2
      matching[k] = keep # Removing these suppresses later warnings.
    elsif keep
      matching[k] = (labels.member?(between[0]) && labels.member?(between[1]))
    else
      matching[k] = (labels.member?(between[0]) || labels.member?(between[1]))
    end
  end
  doc['edges'] = prune_array(edges, matching, keep)
end

def main
  input = nil
  output = nil
  keep = false
  ENV['POSIXLY_CORRECT'] = '1' # Leaves patterns as they are.
  parser = OptionParser.new do |opts|
    opts.summary_indent = '  '
    opts.summary_width = 20
    opts.banner = 'Usage: diagrammatron-prune [options] patterns...'
    opts.separator ''
    opts.separator 'Options:'
    opts.on('-i', '--input FILE', 'Input file name. Read from stdin if not given.') do |filename|
      input = filename
    end
    opts.on('-o', '--output FILE', 'Output file name. Write to stdout if not given.') do |filename|
      output = filename
    end
    opts.on('-r', '--reverse', 'Keep nodes that match patterns.') do
      keep = true
    end
    opts.on('-h', '--help', 'Print this help and exit.') do
      $stdout.puts %(#{opts}
Patterns are strings used to create Ruby Regexps.

Input YAML file is expected to be dot_json2diagrammatron output.

Output is the input file with nodes that have labels that match patterns
removed or kept depending on options. Edges to removed nodes are removed.
)
      exit 0
    end
  end
  parser.parse! ARGV

  begin
    patterns = ARGV.map { |p| Regexp.new(p) }
  rescue StandardError => e
    return aargh("Error creating Regexp: #{e}", 1)
  end
  doc = load_source(input)
  return 2 if doc.nil?

  begin
    prune(doc, patterns, keep)
  rescue StandardError
    return aargh('Error processing input.', 3)
  end

  begin
    d = YAML.dump(doc, line_width: 1000000)
    if output.nil?
      $stdout.puts d
    else
      fp = Pathname.new output
      fp.open('w') do |f|
        f.puts d
      end
    end
  rescue StandardError => e
    return aargh("#{e}\nFailed to write output: #{output || 'stdout'}", 4)
  end
  0
end

exit(main) if (defined? $unit_test).nil?
