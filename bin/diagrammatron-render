#!/usr/bin/env ruby
# frozen_string_literal: true

# Copyright © 2021-2023 Ismo Kärkkäinen
# Licensed under Universal Permissive License. See LICENSE.txt.

require_relative '../lib/common'
require 'optparse'
require 'yaml'
require 'erb'
require 'pathname'
require 'set'
require 'base64'


Coordinate = Struct.new(:object, :key, :direction) do
  def <=>(c)
    d = integer <=> c.integer
    return d unless d.zero?
    d = direction <=> c.direction
    return d unless d.zero?
    fraction <=> c.fraction
  end

  def integer
    object[key].to_int
  end

  def fraction
    object[key] - object[key].floor
  end
end

def end_directions(end_point, neighbor)
  if end_point['xo'] == neighbor['xo'] # Vertical
    return [ 0, (end_point['yo'] < neighbor['yo']) ? 1 : -1 ]
  end
  [ (end_point['xo'] < neighbor['xo']) ? 1 : -1, 0 ]
end

def push_coords(xcoords, ycoords, ckd2count, object, xdirection, ydirection, node = false)
  unless node || xdirection.zero?
    k = [ object['xo'], object['yo'], 'xo', xdirection ]
    ckd2count[k] = ckd2count[k] + 1
  end
  unless node || ydirection.zero?
    k = [ object['xo'], object['yo'], 'yo', ydirection ]
    ckd2count[k] = ckd2count[k] + 1
  end
  xcoords.push(Coordinate.new(object, 'xo', xdirection))
  ycoords.push(Coordinate.new(object, 'yo', ydirection))
end

def separate_coordinates(doc)
  xcoords = []
  ycoords = []
  ckd2count = Hash.new(0)
  doc['nodes'].each do |node|
    # All four sides.
    push_coords(xcoords, ycoords, ckd2count, node, -1, -1, true)
    push_coords(xcoords, ycoords, ckd2count, node.clone, 1, 1, true)
  end
  doc['edges'].each do |edge|
    path = edge['path']
    xdirection, ydirection = end_directions(path[0], path[1])
    push_coords(xcoords, ycoords, ckd2count, path[0], xdirection, ydirection)
    (1...(path.size - 1)).each do |k|
      push_coords(xcoords, ycoords, ckd2count, path[k], 0, 0)
    end
    xdirection, ydirection = end_directions(path.last, path[path.size - 2])
    push_coords(xcoords, ycoords, ckd2count, path.last, xdirection, ydirection)
  end
  xcoords.sort!
  ycoords.sort!
  [ xcoords, ycoords, ckd2count ]
end

class Styles
  def base_styles(m, styles, group)
    d = styles.dig(group, 'default')
    if d.nil?
      d = m.fetch('default', {}) # No default in styles.
    else
      m['default'] = m.fetch('default', {}).merge(d)
      d = m['default']
    end
    styles.fetch(group, {}).each_pair do |name, values|
      s = d.clone
      s.merge!(values) unless name == 'default'
      m[name] = m.fetch(name, {}).merge(s)
    end
    m
  end

  def initialize(template_styles, diagram_styles)
    @n = base_styles(base_styles({}, template_styles, 'node'), diagram_styles, 'node')
    @e = base_styles(base_styles({}, template_styles, 'edge'), diagram_styles, 'edge')
    @d = base_styles(base_styles({}, template_styles, 'diagram'), diagram_styles, 'diagram')
  end

  def fill(mapping, _type_name, item)
    styles = item.fetch('style', [ 'default' ])
    styles = [ styles ] unless styles.is_a?(Array)
    s = {}
    found = false
    styles.each do |name|
      ns = mapping.fetch(name, nil)
      next if ns.nil?
      found = true
      s.merge! ns
    end
    s.merge!(mapping['default']) unless found # Merge default at least.
    # Keep values specified explicitly.
    item.merge!(s) { |_key, existing, from_template| existing || from_template }
  end

  def apply_node_styles(node)
    fill(@n, 'node', node)
  end

  def apply_edge_styles(edge)
    fill(@e, 'edge', edge)
  end

  def apply_diagram_styles(diagram)
    fill(@d, 'diagram', diagram)
  end
end

class SizeEstimation
  attr_accessor :node, :ckd2count, :doc

  def initialize(ckd2count, doc)
    @node = nil
    @ckd2count = ckd2count
    @doc = doc
  end

  def exposed_binding
    binding
  end

  def max_edges(key, edge_gap)
    c = [ @node['xo'], @node['yo'], key, -1 ]
    count = @ckd2count[c]
    c[3] = 1
    count = [ count, @ckd2count[c] ].max
    return 0 if count < 2
    (count - 1) * edge_gap
  end

  # font_size is the actual size.
  # font_width, font_height, font_line_spacing are [0, 1] size scaling factors.
  # width_margin, height_margin are in same units as fonti, space inside node.
  # edge_gap is minimum space between edges at any node side.
  def default_size(font_size, font_width, font_height, font_line_spacing,
      width_margin, height_margin, edge_gap)
    lines = @node['text']
    w = 2 * width_margin + font_width * font_size * (lines.map &(:size)).max
    @node['w'] = [ w, max_edges('xo', edge_gap) ].max
    h = 2 * height_margin + font_height * font_size * lines.size +
      font_line_spacing * font_size * (lines.size - 1)
    @node['h'] = [ h, max_edges('yo', edge_gap) ].max
  end
end

def estimate_sizes(doc, ckd2count)
  $render = SizeEstimation.new(ckd2count, doc)
  doc['nodes'].each do |node|
    $render.node = node
    label = node['label']
    style = node.fetch('style', 'default')
    code = node.fetch('size_estimator',
      %(raise NotImplementedError, "No size estimator for style: #{style}"))
    code = code.join("\n") if code.is_a? Array
    begin
      eval(code, $render.exposed_binding)
    rescue StandardError => e
      return aargh("Size estimate style #{style} node #{label} error #{e}", false)
    end
  end
  $render = nil
  true
end

def maxima(doc)
  xmax = Hash.new(0)
  ymax = Hash.new(0)
  doc['nodes'].each do |node|
    xmax[node['xo']] = [ node['w'], xmax[node['xo']] ].max
    ymax[node['yo']] = [ node['h'], ymax[node['yo']] ].max
  end
  [ xmax, ymax ]
end

def apply_maxima(doc, xmax, ymax)
  doc['nodes'].each do |node|
    node['w'] = xmax[node['xo']]
    node['h'] = ymax[node['yo']]
  end
end

def parallel_edge_step_minima(coords)
  c2m = Hash.new(1.0)
  coords.each do |coord|
    f = coord.fraction
    next if f.zero?
    ic = coord.integer
    c2m[ic] = [ c2m[ic], f ].min
  end
  c2m
end

def remap_coordinates(coords, cmax, c2min, edge_gap)
  c = edge_gap
  gap = 0 # How much space all edge segments need.
  zero_after_decrease = false
  prev_dir = -2
  coords.each do |coord|
    zero_after_decrease = true if prev_dir == -1 && coord.direction.zero?
    case coord.direction
    when -1
      c += gap if -1 < prev_dir
      gap = edge_gap
      coord.object[coord.key] = c
    when 0
      gap = edge_gap / c2min[coord.integer]
      if zero_after_decrease
        # Edge segment is at same range as nodes.
        coord.object[coord.key] = c + coord.fraction * cmax[coord.integer]
      else
        coord.object[coord.key] =
          c + (edge_gap * coord.fraction) / c2min[coord.integer]
      end
    when 1
      gap = edge_gap
      c += cmax[coord.integer] unless prev_dir == 1
      coord.object[coord.key] = c
      zero_after_decrease = false
    end
    prev_dir = coord.direction
  end
end

class Render
  attr_accessor :doc, :template

  def initialize(doc, template)
    @doc = doc
    @template = template
  end

  def exposed_binding
    binding
  end

  def dimensions
    w = 0
    h = 0
    @doc['nodes'].each do |node|
      w = [ w, node['xo'] + node['w'] ].max
      h = [ h, node['yo'] + node['h'] ].max
    end
    @doc['edges'].each do |edge|
      path = edge['path']
      path.each do |p|
        w = [ w, p['xo'] ].max
        h = [ h, p['yo'] ].max
      end
    end
    [ w.to_i, h.to_i ]
  end
end

def apply(doc, template)
  $render = Render.new(doc, template)
  out = ERB.new(template.fetch('template', '')).result($render.exposed_binding)
  $render = nil
  out
end

def reverse_depth_order(a, b)
  d = b['depth'] <=> a['depth']
  return d unless d.zero?
  d = a['index'] <=> b['index']
  return d unless d.zero?
  a['kind'] <=> b['kind']
end

def reverse_depth_sort(items)
  arr = []
  items.each_index do |k|
    arr.push({
      'depth' => items[k].fetch('depth', 0),
      'index' => k,
      'kind' => items[k].fetch('kind', 'unknown')
    })
  end
  arr.sort! { |a, b| reverse_depth_order(a, b) }
  arr.map { |x| items[x['index']] }
end

def main
  template = nil
  input = nil
  input_schema = 'render'
  output = nil
  styles = nil
  parser = OptionParser.new do |opts|
    opts.summary_indent = '  '
    opts.summary_width = 20
    opts.banner = 'Usage: diagrammatron-render [options]'
    opts.separator ''
    opts.separator 'Options:'
    opts.on('-t', '--template FILE', 'Template file name.') do |filename|
      template = filename
    end
    opts.on('-i', '--input FILE', 'Input file name. Read from stdin if not given.') do |filename|
      input = filename
    end
    opts.on('-o', '--output FILE', 'Output file name. Write to stdout if not given.') do |filename|
      output = filename
    end
    opts.on('-h', '--help', 'Print this help and exit.') do
      $stdout.puts %(#{opts}
Input YAML file schema is returned by:
diagrammatron-schema #{input_schema}

There can be other fields present as needed by the template.

Output is the file produced by the erb-template.
)
      exit 0
    end
  end
  parser.parse! ARGV

  return aargh('Template must be given.', 2) if template.nil?
  template = load_source(template)
  return 2 if template.nil?
  template.keys.sort.each do |key|
    next unless key.start_with? 'base64'
    nk = key.slice(6, key.size - 6)
    begin
      template[nk] = Base64.strict_decode64(template[key])
      template.delete key
    rescue StandardError
      return aargh("Key #{key} base-64 decoding failed to key #{nk}", 2)
    end
  end

  doc = load_verified(input, input_schema)
  return 2 if doc.nil?

  styles = Styles.new(template.fetch('styles', {}), doc.fetch('styles', {}))
  doc['nodes'].each do |node|
    styles.apply_node_styles(node)
    node['text'] = node.fetch('text', node['label']).split("\n")
  end
  doc['edges'].each { |edge| styles.apply_edge_styles(edge) }
  doc['diagram'] = {} unless doc.key? 'diagram'
  styles.apply_diagram_styles(doc['diagram'])

  begin
    xcoords, ycoords, ckd2count = separate_coordinates(doc)
  rescue StandardError
    return aargh('Error processing input.', 3)
  end

  return 4 unless estimate_sizes(doc, ckd2count)

  # Make all rows the same height and all columns the same width.
  xmax, ymax = maxima(doc)
  apply_maxima(doc, xmax, ymax)

  x2min = parallel_edge_step_minima(xcoords)
  y2min = parallel_edge_step_minima(ycoords)
  remap_coordinates(xcoords, xmax, x2min, doc.dig('diagram', 'edge_gap'))
  remap_coordinates(ycoords, ymax, y2min, doc.dig('diagram', 'edge_gap'))

  doc['nodes'] = reverse_depth_sort(doc['nodes'])
  doc['edges'] = reverse_depth_sort(doc['edges'])
  all = doc['nodes'].map do |a|
    {
      'kind' => 'node',
      'depth' => a.fetch('depth', 0),
      'item' => a
    }
  end
  all.concat(doc['edges'].map do |a|
    {
      'kind' => 'edge',
      'depth' => a.fetch('depth', 0),
      'item' => a
    }
  end)
  all = reverse_depth_sort(all)
  doc['all'] = all.map do |x|
    {
      'kind' => x['kind'],
      'item' => x['item']
    }
  end

  dump_result(output, apply(doc, template), 5)
end

exit(main) if (defined? $unit_test).nil?
